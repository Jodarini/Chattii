"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const head_1 = __importDefault(require("next/head"));
const trpc_1 = require("../utils/trpc");
const react_1 = __importStar(require("react"));
const image_1 = __importDefault(require("next/image"));
const react_2 = require("next-auth/react");
const HomeComponent = () => {
    var _a, _b;
    const { data: session } = (0, react_2.useSession)();
    const myLoader = () => {
        var _a;
        return (_a = session === null || session === void 0 ? void 0 : session.user) === null || _a === void 0 ? void 0 : _a.image;
    };
    if (session) {
        return (<div className="flex flex-col">
				<div className="flex flex-row items-center justify-center gap-1">
					Hello {(_a = session.user) === null || _a === void 0 ? void 0 : _a.name}!
					<image_1.default className="rounded-full " width={40} height={40} loader={myLoader} src={((_b = session.user) === null || _b === void 0 ? void 0 : _b.image) || ""} alt=""/>
				</div>
				<button className=" bg-amber-500 p-2 rounded m-3" onClick={() => (0, react_2.signOut)()}>
					Sign out
				</button>
				<Chat />
			</div>);
    }
    return (<>
			Not signed in
			<button className=" bg-amber-500 p-2 rounded m-3" onClick={() => (0, react_2.signIn)()}>
				Sign in{" "}
			</button>
		</>);
};
const Home = () => {
    return (<>
			<head_1.default>
				<title>Chattii</title>
				<meta name="description" content="Generated by create-t3-app"/>
				<link rel="icon" href="/favicon.ico"/>
			</head_1.default>

			<main className="container mx-auto flex flex-col items-center justify-center h-screen p-4">
				<h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold ">
					Cha<span className="text-amber-500">tt</span>ii
				</h1>

				<HomeComponent />
				{/* <div className="pt-6 text-2xl text-blue-500 flex justify-center items-center w-full">
            <br />
            {hello.data ? (
                <p>{hello.data.greeting}</p>
            ) : (
                <p>Loading..</p>
            )}
        </div> */}
			</main>
		</>);
};
const Chat = () => {
    const { data: session } = (0, react_2.useSession)();
    const [messages, setMessages] = (0, react_1.useState)("");
    const [chat, setChat] = (0, react_1.useState)("");
    const messages2 = trpc_1.trpc.useQuery(["example.getAll"]);
    const [subMessages, setSubMessages] = (0, react_1.useState)(() => {
        return messages2.data;
    });
    trpc_1.trpc.useSubscription(["example.onAdd"], {
        onNext(message) {
            setSubMessages(msgs => [...(msgs || []), message]);
        },
    });
    const getAll = trpc_1.trpc.useQuery(["example.getAll"]);
    const mutation = trpc_1.trpc.useMutation([
        "example.add", // name of the mutation
    ]
    // { onSuccess: () => setMessages("") }
    );
    const addPost = trpc_1.trpc.useMutation("example.add");
    // async function sendMessage2(
    // 	e: React.FormEvent<HTMLFormElement>
    // ) {
    // 	e.preventDefault();
    // 	if (messages.length === 0) {
    // 		return;
    // 	}
    // 	const input = {
    // 		content: messages,
    // 		userName: session?.user?.name || "Anonymous",
    // 	};
    // 	await addPost.mutateAsync(input);
    // 	setMessages("");
    // }
    const sendMessage = (e) => {
        var _a;
        e.preventDefault();
        if (messages.length === 0) {
            return;
        }
        setChat(messages);
        mutation.mutate({
            content: messages,
            userName: ((_a = session === null || session === void 0 ? void 0 : session.user) === null || _a === void 0 ? void 0 : _a.name) || "Anonymous",
        });
        setMessages("");
        console.log("Message sent:", messages);
    };
    return (<>
			<div className="p-3 min-w-full bg-slate-800 mb-4">
				{getAll.data ? (getAll.data.map(element => {
            return (<p key={element.id}>
								{element.userName + ": "}
								<span className=" text-gray-400 ">
									{element.content + "\n"}
								</span>
							</p>);
        })) : (<p>Loading..</p>)}
			</div>
			<form onSubmit={sendMessage} className="w-full flex">
				<input type="text" value={messages} onChange={e => setMessages(e.target.value)} className="text-slate-800 w-full"/>
				<input type="submit" value="Send" className=" bg-amber-500 p-2 rounded ml-2"/>
				{mutation.error && <p>Error: {mutation.error.message}</p>}
			</form>
		</>);
};
const TechnologyCard = ({ name, description, documentation, }) => {
    return (<section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 rounded shadow-xl motion-safe:hover:scale-105">
			<h2 className="text-lg text-gray-700">{name}</h2>
			<p className="text-sm text-gray-600">{description}</p>
			<a className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2" href={documentation} target="_blank" rel="noreferrer">
				Documentation
			</a>
		</section>);
};
exports.default = Home;
